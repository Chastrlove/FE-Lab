/*
输入： cost = [10,15,20]
输出： 15
解释： 你将从下标为 1 的台阶开始。
- 支付 15 ，向上爬两个台阶，到达楼梯顶部。
*/

/*
输入： cost = [1,100,1,1,1,100,1,1,100,1]
输出： 6
解释： 你将从下标为 0 的台阶开始。
- 支付 1 ，向上爬两个台阶，到达下标为 2 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 4 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 6 的台阶。
- 支付 1 ，向上爬一个台阶，到达下标为 7 的台阶。
- 支付 1 ，向上爬两个台阶，到达下标为 9 的台阶。
- 支付 1 ，向上爬一个台阶，到达楼梯顶部。
*/

//注意。如果最后一步能跨上顶部则不算体力，顶部指的是数组溢出的位置即数组长度

//踏上第 i 级台阶的体力消耗为到达前两个阶梯的最小体力消耗加上本层体力消耗：
export const minCostClimbingStairs = (input: number[]) => {
  let max = 0;
  let n1 = input[0];
  let n2 = input[1];
  for (let i = 2; i <= input.length; i++) {
    max = Math.min(n1, n2) + (input[i] ?? 0);
    [n1, n2] = [n2, max];
  }
  return max;
};
